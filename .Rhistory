AGE_AVG,
INCOME_LOW40PCT,
BUSINESS_REL,
CRIME_TOTAL,
PUB_SERV,
MARRIED_PCT,
FEMALE_PCT,
SOCSEC_PCT,
DENS_POP,
PERC_IMMIGRATION_ORIG,
HH_SIZE,
ENERGY_AVG) )
source("importData.R")
getwd()
# before running anything, set a working dir <YOUR DIR WITH assignmentBN.R>
#setwd('D:/Assignments/Bayesian Network/Assignment/Code/BayesianNetworks/')
setwd('/home/denise/Documents/Vakken/BN/BayesianNetworks')
getwd()
source("importData.R")
source("preProcessData.R")
source("importData.R")
source("preProcessData.R")
source("importData.R")
source("preProcessData.R")
#
# preProcessData.R
#
# pre processing of the data
#####################################################################
# status per 10-12
# TODO: modify / create columns so they fit with the nodes in the dag
# IncomeDistribution 		  : TODO: create kind of average age collum INCOME_AVG
# Urbanization 		        : TODO: created average (I am afraid this is not in the dataset, propose to leave it out...)
#####################################################################
# etc
# filter data, make data useable for cont network
cbsData <- subset(cbsData, grepl("Wijk*", REGIONTYPE))  # any regex possible
cbsData$INCOME_HIGH20PCT <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_HIGH20PCT)))
cbsData$INCOME_SOCMIN <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_SOCMIN)))
#Delete other columns,I think, we can use HH_SIZE
if("HH_TOT" %in% colnames(cbsData))
{
cbsData = subset(cbsData, select = -c(HH_TOT,SINGLE_HH_TOT,NOCHILD_HH_TOT,CHILD_HH_TOT))
}
cbsData$HH_SIZE <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$HH_SIZE)))
### Handle "," AGE###
#
if(!"AGE_AVG" %in% colnames(cbsData))
{
# convert to char
cbsData[8:12]<-lapply(cbsData[8:12], as.character)
#Remove ","
cbsData[AGEGROUP_015] <- gsub("\\,","",cbsData$AGEGROUP_015)
cbsData[AGEGROUP_1525] <- gsub("\\,","",cbsData$AGEGROUP_1525)
cbsData[AGEGROUP_2545] <- gsub("\\,","",cbsData$AGEGROUP_2545)
cbsData[AGEGROUP_4565] <- gsub("\\,","",cbsData$AGEGROUP_4565)
cbsData[AGEGROUP_65UP] <- gsub("\\,", "", cbsData$AGEGROUP_65UP)
#Convert to numeric
cbsData[8:12] <- lapply(cbsData[8:12], as.numeric)
#Compute Average Age
#Average For each group
cbsData$Mean7.5<-cbsData[AGEGROUP_015]*7.5
cbsData$Mean20<-cbsData[AGEGROUP_1525]*20
cbsData$Mean35<-cbsData[AGEGROUP_2545]*35
cbsData$Mean55<-cbsData[AGEGROUP_4565]*55
cbsData$Mean80<-cbsData[AGEGROUP_65UP]*80
cbsData$AgeCount <- rowSums(cbsData[,c(8:12)], na.rm=TRUE)
cbsData$AgeSum <- rowSums(cbsData[,c("Mean7.5", "Mean20","Mean35","Mean55","Mean80")], na.rm=TRUE)
cbsData$AGE_AVG<- cbsData$AgeSum/cbsData$AgeCount
#Delete other columns
cbsData = subset(cbsData, select = -c(AGEGROUP_015,AGEGROUP_1525,AGEGROUP_2545,AGEGROUP_4565,AGEGROUP_65UP,Mean7.5,Mean20,Mean35,Mean55,Mean80,AgeSum,AgeCount))
}
###compute BUSINESS LOCATIONS ###
#
if(!"BUSINESS_REL" %in% colnames(cbsData))
{
# cbsData$BUSINESS_REL <- cbsData$BUSINESS_LOCATIONS / cbsData$POPULATION * 1000
cbsData$BUSINESS_REL <- as.numeric(as.character(cbsData$BUSINESS_LOCATIONS )) / as.numeric(as.character(cbsData$POPULATION)) * 1000
}
### Handle "," POPULATION ####
#
#Convert to Character
cbsData[POPULATION]<-lapply(cbsData[POPULATION], as.character)
#Remove ","
cbsData[POPULATION]<-gsub("\\,", "", cbsData$POPULATION)
#Convert to numeric
cbsData[POPULATION]<- lapply(cbsData[POPULATION], as.numeric)
cbsData <- subset(cbsData, POPULATION > 5) #remove zero populations
###compute MARRIED % ###
if(!"MARRIED_PCT" %in% colnames(cbsData))
{
cbsData$MARRIED_PCT <- as.numeric(as.character(cbsData$MARRIED)) / as.numeric(as.character(cbsData$POPULATION)) * 100
#Delete other columnss
cbsData = subset(cbsData, select = -c(UNMARRIED,SEPARATED,WIDOWED,MARRIED))
}
###compute SEX: FEMALE % ###
if(!"FEMALE_PCT" %in% colnames(cbsData))
{
cbsData$FEMALE_PCT <- as.numeric(as.character(cbsData$FEMALE)) / as.numeric(as.character(cbsData$POPULATION)) * 100
#Delete other columns
cbsData = subset(cbsData, select = -c(FEMALE,MALE))
}
###compute IMMIGRATION_ORIG % ###
if(!"PERC_IMMIGRATION_ORIG" %in% colnames(cbsData))
{
cbsData$PERC_IMMIGRATION_ORIG <- (cbsData$WESTERN_ORIG + cbsData$NONWESTERN_ORIG) / cbsData$POPULATION * 100
#Delete other columns
cbsData = subset(cbsData, select = -c(WESTERN_ORIG,NONWESTERN_ORIG,MOROCCO_ORIG,ABC_ORIG,SURINAME_ORIG,TURKEY_ORIG,OTHER_ORIG ))
}
###compute SOCSEC_PCT % ###
if(!"SOCSEC_PCT" %in% colnames(cbsData))
{
sc <- grep("SOCSEC_NO_INCOME",colnames(cbsData))
ec <- grep("SOCSEC_WW",colnames(cbsData))
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.character)
# cbsData[c(SOCSEC_NO_INCOME,SOCSEC_AO,SOCSEC_WW ,SOCSEC_AOW)]<-lapply(cbsData[c(SOCSEC_NO_INCOME,SOCSEC_AO,SOCSEC_WW ,SOCSEC_AOW)], as.character)
#Remove ","
cbsData[SOCSEC_NO_INCOME] <- gsub("\\,","",cbsData$SOCSEC_NO_INCOME)
cbsData[SOCSEC_AO] <- gsub("\\,","",cbsData$SOCSEC_AO)
cbsData[SOCSEC_WW] <- gsub("\\,","",cbsData$SOCSEC_WW)
cbsData[SOCSEC_AOW] <- gsub("\\,","",cbsData$SOCSEC_AOW)
#Convert to numeric
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.numeric)
# cbsData[c(SOCSEC_NO_INCOME, SOCSEC_AO,SOCSEC_WW,SOCSEC_AOW)] <- lapply(cbsData[c(SOCSEC_NO_INCOME, SOCSEC_AO,SOCSEC_WW,SOCSEC_AOW)], as.numeric)
#without AOW might be better?
cbsData <- cbsData %>%
mutate(SOCSEC_PCT = rowSums(.[sc:ec]/ POPULATION * 100))
#Delete other columns
cbsData = subset(cbsData, select = -c(SOCSEC_NO_INCOME, SOCSEC_AO, SOCSEC_WW, SOCSEC_AOW))
}
###compute ENERGY_AVG ###
#
if(!"ENERGY_AVG" %in% colnames(cbsData))
{
cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)]<-lapply(cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)], as.character)
#Remove ","
cbsData$AVG_GAS_CONS<-gsub("\\,", "", cbsData$AVG_GAS_CONS)
cbsData$AVG_ELECTRICITY_CONS<-gsub("\\,", "", cbsData$AVG_ELECTRICITY_CONS)
#Convert to numeric
cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)]<- lapply(cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)], as.numeric)
#Replace NA with 0
cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)][is.na(cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)])] <- 0
cbsData$ENERGY_AVG <- cbsData$AVG_ELECTRICITY_CONS + cbsData$AVG_GAS_CONS
#Delete other columns
cbsData = subset(cbsData, select = -c(AVG_GAS_CONS,AVG_ELECTRICITY_CONS))
}
###compute PUB_SERV ###
#
if(!"PUB_SERV" %in% colnames(cbsData))
{
sc <- grep("GEN_DIST_GP",colnames(cbsData))
ec <- grep("GEN_DIST_SCHOOL", colnames(cbsData))
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.character)
cbsData[GEN_DIST_DAYCARE] <- gsub("\\,",".",cbsData$GEN_DIST_DAYCARE)
cbsData[GEN_DIST_GP] <- gsub("\\,",".",cbsData$GEN_DIST_GP)
cbsData[GEN_DIST_SUPERMARKET] <- gsub("\\,",".",cbsData$GEN_DIST_SUPERMARKET)
cbsData[GEN_DIST_SCHOOL] <- gsub("\\,",".",cbsData$GEN_DIST_SCHOOL)
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.numeric)
cbsData$PUB_SERV <-((cbsData$GEN_DIST_DAYCARE + cbsData$GEN_DIST_GP + cbsData$GEN_DIST_SCHOOL + cbsData$GEN_DIST_SUPERMARKET)/4)
#Delete obsolete columns
cbsData = subset(cbsData, select = -c(GEN_DIST_DAYCARE,GEN_DIST_GP,GEN_DIST_SCHOOL,GEN_DIST_SUPERMARKET) )
}
###compute CRIME_TOTAL ###
#
if(!"CRIME_TOTAL" %in% colnames(cbsData))
{
cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)]<-lapply(cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)], as.character)
#Remove ","
cbsData[CRIME_BURGLARY_REL] <- gsub("\\,","",cbsData$CRIME_BURGLARY_REL)
cbsData[CRIME_PUB_ORDER_REL] <- gsub("\\,","",cbsData$CRIME_PUB_ORDER_REL)
cbsData[CRIME_VIOLENCE_SEX_REL] <- gsub("\\,","",cbsData$CRIME_VIOLENCE_SEX_REL)
#Convert to numeric
cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)] <- lapply(cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)], as.numeric)
cbsData$CRIME_TOTAL<- cbsData$CRIME_BURGLARY_REL + cbsData$CRIME_PUB_ORDER_REL + cbsData$CRIME_VIOLENCE_SEX_REL
#Delete other columns
cbsData = subset(cbsData, select = -c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL) )
}
#
##MORTALITY_REL
cbsData[MORTALITY_REL ]<-lapply(cbsData[MORTALITY_REL ], as.character)
#Convert to numeric
cbsData[MORTALITY_REL]<- lapply(cbsData[MORTALITY_REL], as.numeric)
##BIRTH_REL
cbsData[BIRTH_REL ]<-lapply(cbsData[BIRTH_REL ], as.character)
#Convert to numeric
cbsData[BIRTH_REL]<- lapply(cbsData[BIRTH_REL], as.numeric)
##DENS_POP
cbsData[DENS_POP ]<-lapply(cbsData[DENS_POP ], as.character)
#Convert to numeric
cbsData[DENS_POP]<- lapply(cbsData[DENS_POP], as.numeric)
##LAND_SIZE
cbsData[LAND_SIZE ]<-lapply(cbsData[LAND_SIZE ], as.character)
#Convert to numeric
cbsData[LAND_SIZE]<- lapply(cbsData[LAND_SIZE], as.numeric)
##VACANCY
cbsData[VACANCY ]<-lapply(cbsData[VACANCY ], as.character)
#Convert to numeric
cbsData[VACANCY]<- lapply(cbsData[VACANCY], as.numeric)
##HOUSE_VAL_AVG
cbsData[HOUSE_VAL_AVG ]<-lapply(cbsData[HOUSE_VAL_AVG ], as.character)
#Convert to numeric
cbsData[HOUSE_VAL_AVG]<- lapply(cbsData[HOUSE_VAL_AVG], as.numeric)
sapply(cbsData, class)
cbsData$INCOME_LOW40PCT <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_LOW40PCT)))
cbsData[c(INCOME_LOW40PCT)][is.na(cbsData[c(INCOME_LOW40PCT)])] <- 0
cbsData$INCOME_AVG <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_AVG)))
cbsData$CAR_PER_HH <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$CAR_PER_HH)))
cbsData$INCOME_LOW <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_LOW)))
cbsData <- na.omit(cbsData)
source("importData.R")
# etc
# filter data, make data useable for cont network
cbsData <- subset(cbsData, grepl("Wijk*", REGIONTYPE))  # any regex possible
cbsData$INCOME_HIGH20PCT <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_HIGH20PCT)))
cbsData$INCOME_SOCMIN <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_SOCMIN)))
#Delete other columns,I think, we can use HH_SIZE
if("HH_TOT" %in% colnames(cbsData))
{
cbsData = subset(cbsData, select = -c(HH_TOT,SINGLE_HH_TOT,NOCHILD_HH_TOT,CHILD_HH_TOT))
}
cbsData$HH_SIZE <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$HH_SIZE)))
if(!"BUSINESS_REL" %in% colnames(cbsData))
{
# cbsData$BUSINESS_REL <- cbsData$BUSINESS_LOCATIONS / cbsData$POPULATION * 1000
cbsData$BUSINESS_REL <- as.numeric(as.character(cbsData$BUSINESS_LOCATIONS )) / as.numeric(as.character(cbsData$POPULATION)) * 1000
}
### Handle "," POPULATION ####
#
#Convert to Character
cbsData[POPULATION]<-lapply(cbsData[POPULATION], as.character)
#Remove ","
cbsData[POPULATION]<-gsub("\\,", "", cbsData$POPULATION)
#Convert to numeric
cbsData[POPULATION]<- lapply(cbsData[POPULATION], as.numeric)
cbsData <- subset(cbsData, POPULATION > 5) #remove zero populations
###compute MARRIED % ###
if(!"MARRIED_PCT" %in% colnames(cbsData))
{
cbsData$MARRIED_PCT <- as.numeric(as.character(cbsData$MARRIED)) / as.numeric(as.character(cbsData$POPULATION)) * 100
#Delete other columnss
cbsData = subset(cbsData, select = -c(UNMARRIED,SEPARATED,WIDOWED,MARRIED))
}
###compute SEX: FEMALE % ###
if(!"FEMALE_PCT" %in% colnames(cbsData))
{
cbsData$FEMALE_PCT <- as.numeric(as.character(cbsData$FEMALE)) / as.numeric(as.character(cbsData$POPULATION)) * 100
#Delete other columns
cbsData = subset(cbsData, select = -c(FEMALE,MALE))
}
###compute IMMIGRATION_ORIG % ###
if(!"PERC_IMMIGRATION_ORIG" %in% colnames(cbsData))
{
cbsData$PERC_IMMIGRATION_ORIG <- (cbsData$WESTERN_ORIG + cbsData$NONWESTERN_ORIG) / cbsData$POPULATION * 100
#Delete other columns
cbsData = subset(cbsData, select = -c(WESTERN_ORIG,NONWESTERN_ORIG,MOROCCO_ORIG,ABC_ORIG,SURINAME_ORIG,TURKEY_ORIG,OTHER_ORIG ))
}
###compute SOCSEC_PCT % ###
if(!"SOCSEC_PCT" %in% colnames(cbsData))
{
sc <- grep("SOCSEC_NO_INCOME",colnames(cbsData))
ec <- grep("SOCSEC_WW",colnames(cbsData))
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.character)
# cbsData[c(SOCSEC_NO_INCOME,SOCSEC_AO,SOCSEC_WW ,SOCSEC_AOW)]<-lapply(cbsData[c(SOCSEC_NO_INCOME,SOCSEC_AO,SOCSEC_WW ,SOCSEC_AOW)], as.character)
#Remove ","
cbsData[SOCSEC_NO_INCOME] <- gsub("\\,","",cbsData$SOCSEC_NO_INCOME)
cbsData[SOCSEC_AO] <- gsub("\\,","",cbsData$SOCSEC_AO)
cbsData[SOCSEC_WW] <- gsub("\\,","",cbsData$SOCSEC_WW)
cbsData[SOCSEC_AOW] <- gsub("\\,","",cbsData$SOCSEC_AOW)
#Convert to numeric
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.numeric)
# cbsData[c(SOCSEC_NO_INCOME, SOCSEC_AO,SOCSEC_WW,SOCSEC_AOW)] <- lapply(cbsData[c(SOCSEC_NO_INCOME, SOCSEC_AO,SOCSEC_WW,SOCSEC_AOW)], as.numeric)
#without AOW might be better?
cbsData <- cbsData %>%
mutate(SOCSEC_PCT = rowSums(.[sc:ec]/ POPULATION * 100))
#Delete other columns
cbsData = subset(cbsData, select = -c(SOCSEC_NO_INCOME, SOCSEC_AO, SOCSEC_WW, SOCSEC_AOW))
}
###compute ENERGY_AVG ###
#
if(!"ENERGY_AVG" %in% colnames(cbsData))
{
cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)]<-lapply(cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)], as.character)
#Remove ","
cbsData$AVG_GAS_CONS<-gsub("\\,", "", cbsData$AVG_GAS_CONS)
cbsData$AVG_ELECTRICITY_CONS<-gsub("\\,", "", cbsData$AVG_ELECTRICITY_CONS)
#Convert to numeric
cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)]<- lapply(cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)], as.numeric)
#Replace NA with 0
cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)][is.na(cbsData[c(AVG_GAS_CONS, AVG_ELECTRICITY_CONS)])] <- 0
cbsData$ENERGY_AVG <- cbsData$AVG_ELECTRICITY_CONS + cbsData$AVG_GAS_CONS
#Delete other columns
cbsData = subset(cbsData, select = -c(AVG_GAS_CONS,AVG_ELECTRICITY_CONS))
}
###compute PUB_SERV ###
#
if(!"PUB_SERV" %in% colnames(cbsData))
{
sc <- grep("GEN_DIST_GP",colnames(cbsData))
ec <- grep("GEN_DIST_SCHOOL", colnames(cbsData))
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.character)
cbsData[GEN_DIST_DAYCARE] <- gsub("\\,",".",cbsData$GEN_DIST_DAYCARE)
cbsData[GEN_DIST_GP] <- gsub("\\,",".",cbsData$GEN_DIST_GP)
cbsData[GEN_DIST_SUPERMARKET] <- gsub("\\,",".",cbsData$GEN_DIST_SUPERMARKET)
cbsData[GEN_DIST_SCHOOL] <- gsub("\\,",".",cbsData$GEN_DIST_SCHOOL)
cbsData[sc:ec]<-lapply(cbsData[sc:ec], as.numeric)
cbsData$PUB_SERV <-((cbsData$GEN_DIST_DAYCARE + cbsData$GEN_DIST_GP + cbsData$GEN_DIST_SCHOOL + cbsData$GEN_DIST_SUPERMARKET)/4)
#Delete obsolete columns
cbsData = subset(cbsData, select = -c(GEN_DIST_DAYCARE,GEN_DIST_GP,GEN_DIST_SCHOOL,GEN_DIST_SUPERMARKET) )
}
###compute CRIME_TOTAL ###
#
if(!"CRIME_TOTAL" %in% colnames(cbsData))
{
cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)]<-lapply(cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)], as.character)
#Remove ","
cbsData[CRIME_BURGLARY_REL] <- gsub("\\,","",cbsData$CRIME_BURGLARY_REL)
cbsData[CRIME_PUB_ORDER_REL] <- gsub("\\,","",cbsData$CRIME_PUB_ORDER_REL)
cbsData[CRIME_VIOLENCE_SEX_REL] <- gsub("\\,","",cbsData$CRIME_VIOLENCE_SEX_REL)
#Convert to numeric
cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)] <- lapply(cbsData[c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL)], as.numeric)
cbsData$CRIME_TOTAL<- cbsData$CRIME_BURGLARY_REL + cbsData$CRIME_PUB_ORDER_REL + cbsData$CRIME_VIOLENCE_SEX_REL
#Delete other columns
cbsData = subset(cbsData, select = -c(CRIME_BURGLARY_REL, CRIME_PUB_ORDER_REL,CRIME_VIOLENCE_SEX_REL) )
}
#
##MORTALITY_REL
cbsData[MORTALITY_REL ]<-lapply(cbsData[MORTALITY_REL ], as.character)
#Convert to numeric
cbsData[MORTALITY_REL]<- lapply(cbsData[MORTALITY_REL], as.numeric)
##BIRTH_REL
cbsData[BIRTH_REL ]<-lapply(cbsData[BIRTH_REL ], as.character)
#Convert to numeric
cbsData[BIRTH_REL]<- lapply(cbsData[BIRTH_REL], as.numeric)
##DENS_POP
cbsData[DENS_POP ]<-lapply(cbsData[DENS_POP ], as.character)
#Convert to numeric
cbsData[DENS_POP]<- lapply(cbsData[DENS_POP], as.numeric)
##LAND_SIZE
cbsData[LAND_SIZE ]<-lapply(cbsData[LAND_SIZE ], as.character)
#Convert to numeric
cbsData[LAND_SIZE]<- lapply(cbsData[LAND_SIZE], as.numeric)
##VACANCY
cbsData[VACANCY ]<-lapply(cbsData[VACANCY ], as.character)
#Convert to numeric
cbsData[VACANCY]<- lapply(cbsData[VACANCY], as.numeric)
##HOUSE_VAL_AVG
cbsData[HOUSE_VAL_AVG ]<-lapply(cbsData[HOUSE_VAL_AVG ], as.character)
#Convert to numeric
cbsData[HOUSE_VAL_AVG]<- lapply(cbsData[HOUSE_VAL_AVG], as.numeric)
sapply(cbsData, class)
cbsData$INCOME_LOW40PCT <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_LOW40PCT)))
cbsData[c(INCOME_LOW40PCT)][is.na(cbsData[c(INCOME_LOW40PCT)])] <- 0
cbsData$INCOME_AVG <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_AVG)))
cbsData$CAR_PER_HH <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$CAR_PER_HH)))
cbsData$INCOME_LOW <- as.numeric(gsub(",", ".", gsub("\\.", "", cbsData$INCOME_LOW)))
cbsData <- na.omit(cbsData)
View(cbsData)
Mean7.5<-cbsData[AGEGROUP_015]*7.5
Mean20<-cbsData[AGEGROUP_1525]*20
Mean35<-cbsData[AGEGROUP_2545]*35
Mean55<-cbsData[AGEGROUP_4565]*55
Mean80<-cbsData[AGEGROUP_65UP]*80
AgeSum <- sum(Mean80,Mean55, Mean35, Mean20, Mean7.5, na.rm = TRUE)
AgeSum <- rowsum(Mean80,Mean55, Mean35, Mean20, Mean7.5, na.rm = TRUE)
AgeSum <- rowSums(Mean80,Mean55, Mean35, Mean20, Mean7.5, na.rm = TRUE)
AgeSum <- rowSums(c[Mean80,Mean55, Mean35, Mean20, Mean7.5], na.rm = TRUE)
AgeSum <- rowSums(,c[Mean80,Mean55, Mean35, Mean20, Mean7.5], na.rm = TRUE)
AgeSum <- Mean80+ Mean55+ Mean35+ Mean20+ Mean7.5
View(AgeSum)
View(AgeSum)
View(Mean80)
View(Mean55)
cbsData$AGE_AVG<- AgeSum/cbsData$POPULATION
View(cbsData)
View(cbsData)
#Delete other columns
cbsData = subset(cbsData, select = -c(AGEGROUP_015,AGEGROUP_1525,AGEGROUP_2545,AGEGROUP_4565,AGEGROUP_65UP))
View(cbsData)
source("importData.R")
source("importData.R")
source("preProcessData.R")
View(cbsData)
View(cbsData)
?rm
rm(AgeSum,Mean7.5,Mean20,Mean35,Mean35,Mean55,Mean80)
colnames(cbsData)[ncol(cbsData)] <- "AGE_AVG"
source("importData.R")
source("preProcessData.R")
View(cbsData)
View(cbsData)
source("importData.R")
source("preProcessData.R")
View(cbsData)
cbsData$AGE_AVG
#install.packages("pcalg")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(pcalg)
d <- subset(cbsData, select = c(
AGE_AVG,
INCOME_LOW40PCT,
BUSINESS_REL,
CRIME_TOTAL,
PUB_SERV,
MARRIED_PCT,
FEMALE_PCT,
SOCSEC_PCT,
DENS_POP,
PERC_IMMIGRATION_ORIG,
HH_SIZE,
ENERGY_AVG) )
rowCount <-  nrow    (d)
columnName <- colnames(d)
pc.fit <- pc(suffStat = list(C = cor(d), n = rowCount), indepTest = gaussCItest, alpha=0.01, labels = columnName, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
}
pc.fit <- pc(suffStat = list(C = cor(d), n = rowCount), indepTest = gaussCItest, alpha=0.01, labels = columnName, verbose = TRUE)
source("importData.R")
source("preProcessData.R")
View(cbsData)
d <- subset(cbsData, select = c(
AGE_AVG,
INCOME_LOW40PCT,
BUSINESS_REL,
CRIME_TOTAL,
PUB_SERV,
MARRIED_PCT,
FEMALE_PCT,
SOCSEC_PCT,
DENS_POP,
PERC_IMMIGRATION_ORIG,
HH_SIZE,
ENERGY_AVG) )
rowCount <-  nrow    (d)
columnName <- colnames(d)
pc.fit <- pc(suffStat = list(C = cor(d), n = rowCount), indepTest = gaussCItest, alpha=0.01, labels = columnName, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
}
thing <- tabu(d, start = NULL, whitelist = NULL, blacklist = NULL, score = NULL, debug = FALSE,
tabu = 10, max.tabu = tabu, max.iter = Inf, maxp = Inf, optimized = TRUE)
thing <- tabu(d, start = NULL, whitelist = NULL, blacklist = NULL, score = NULL, debug = FALSE,
tabu = 10, max.tabu = tabu, max.iter = 100, maxp = Inf, optimized = TRUE)
thing <- tabu(d, start = NULL, whitelist = NULL, blacklist = NULL, score = NULL, debug = FALSE,
tabu = 10, max.tabu = 100, max.iter = 100, maxp = Inf, optimized = TRUE)
thing <- tabu(d)
thing
thing <- tabu(d, start = NULL, whitelist = NULL, blacklist = NULL, score = NULL, debug = TRUE,
tabu = 10, max.tabu = 100, max.iter = 100, maxp = Inf, optimized = TRUE)
thing <- tabu(d, start = NULL, whitelist = NULL, blacklist = NULL, score = NULL, debug = TRUE,
optimized = TRUE)
thing <- tabu(d)
thing
View(thing)
View(pc.fit)
View(thing)
thing$nodes
plot(thing$learning)
plot(thing$nodes)
plot(thing$arcs)
graphLayout(thing)
graphviz.plot(thing)
graphviz.plot(thing, col = "grey"))
graphviz.plot(thing, col = "grey")
graphviz.plot(thing, shape = "elipse")
graphviz.plot(thing, shape = "ellipse")
graphviz.plot(thing, shape = "ellipse")
graphviz.plot(thing, shape = "rectangle")
graphviz.plot(thing, shape = "ellipse", color = "white")
?graphviz.plot
graphviz.plot(thing, shape = "ellipse", highlight = ["CRIME_TOTAL"], col = "white")
graphviz.plot(thing, shape = "ellipse", highlight = "CRIME_TOTAL", col = "white")
graphviz.plot(thing, shape = "ellipse", highlight = [nodes = "CRIME_TOTAL" , col = "white"])
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "white"))
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "white",color = "white"))
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "white",textCol = "white"))
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "pink",textCol = "pink"))
plot.new()
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "pink",textCol = "pink"))
plot.new()
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "pink",textCol = "pink"))
plot.new()
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "pink",textCol = "pink"))
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "blue",textCol = "blue"))
# https://www.bnlearn.com/documentation/man/hc.html <- link for hc and tabu in one (almost the same)
library(bnlearn)
#setwd('/home/denise/Documents/Vakken/BN/BayesianNetworks')
d <- subset(cbsData, select = c(
AGE_AVG,
INCOME_LOW40PCT,
BUSINESS_REL,
CRIME_TOTAL,
PUB_SERV,
MARRIED_PCT,
FEMALE_PCT,
SOCSEC_PCT,
DENS_POP,
PERC_IMMIGRATION_ORIG,
HH_SIZE,
ENERGY_AVG) )
###
testCBS <- cbsData[,-(1:4)]
testCBS[] <- lapply(testCBS, as.factor)
thing <- tabu(d)
thing
plot.new()
graphviz.plot(thing, shape = "ellipse", highlight = list(nodes = "CRIME_TOTAL" , col = "blue",textCol = "blue"))
